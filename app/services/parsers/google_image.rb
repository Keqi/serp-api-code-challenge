module Parsers
  class GoogleImage < Base
    # These class names seem to be generated by some Google algorithm and might be easily re-generated causing our Parser to fail.
    IMAGE_SLIDER_CLASS = 'MiPcId'
    IMAGE_NAME_CLASS = 'kltat'
    IMAGE_EXTENSIONS_CLASS = 'ellip'
    IMAGE_LINK_CLASS = 'klitem'

    def initialize(file_path:)
      super
    end

    def call
      paintings_slider_elements_html = document.search(".appbar .#{IMAGE_SLIDER_CLASS}")
      images_script = document.css('script').find { |script| script.text.include?('setImagesSrc') && script.text.include?('data:image') }

      paintings_slider_elements_html.map { |image_html| as_image_record(image_html:, images_script:) }
                                    .map(&:to_h)
    end

    private

    def as_image_record(image_html:, images_script:)
      image = Image.new

      Image::ATTRIBUTES.each do |attribute|
        image.send("#{attribute}=", send(attribute, image_html: , images_script:))
      end

      image
    end

    def extensions(**args)
      extensions_text = args[:image_html].search("div.#{IMAGE_EXTENSIONS_CLASS}").first

      [extensions_text.content.strip] if extensions_text
    end

    # The results generated by this method are shifted by one comparing to expected-array.json image properties. It's caused by the fact
    # that regular expressions in my solution and the production one catch results differently. I am happy to explain it on the call :)
    def image(**args)
      image_node = args[:image_html].search('img').first
      return unless image_node

      image_id = image_node.get_attribute('id')
      return unless image_id

      first_match = args[:images_script].content.match(/ii=\['#{image_id}'\][\S]* s='(\S)*'/)
      return unless first_match

      second_match = first_match[0].match(/(data:image.*)'/)

      second_match[1] if second_match
    end

    def link(**args)
      link_node = args[:image_html].search("a.#{IMAGE_LINK_CLASS}").first
      link_node.get_attribute('href') if link_node
    end

    def name(**args)
      name_text = args[:image_html].search("div.#{IMAGE_NAME_CLASS}").first
      name_text.content.strip if name_text
    end
  end
end